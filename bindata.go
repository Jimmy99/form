// Code generated by go-bindata.
// sources:
// web/test.tmpl
// web/your-404-page.tmpl
// web/your-500-page.tmpl
// tmpl/aform.tmpl
// tmpl/ainput.tmpl
// tmpl/form.tmpl
// tmpl/input.tmpl
// DO NOT EDIT!

package form

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webTestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x2a\xcd\xcc\x49\x51\x08\x4e\xcc\x2d\xc8\x49\x75\xcb\x2f\xca\x55\xd0\x0b\xd2\x0b\x0d\xf2\xd1\x0b\x48\x2c\xc9\x50\x50\x0a\xf0\x0f\x0e\x51\x52\x50\x0a\x4e\x2c\x4b\x55\x52\xd0\x0b\x4e\x2d\x2e\xce\xcc\xcf\x53\xa8\xad\xe5\xe2\xaa\xae\xce\x4c\x53\xf0\x48\x2c\x76\xca\x4f\xa9\x54\xd0\x0b\xaa\xad\xe5\xe2\xac\xae\x56\x49\x2d\x2a\x52\xb0\xb2\x55\x80\x1a\x84\x6c\x2c\x42\x41\x6d\x2d\x57\x75\x75\x6a\x5e\x4a\x6d\x2d\x20\x00\x00\xff\xff\xd4\x4c\xd5\x70\x7f\x00\x00\x00")

func webTestTmplBytes() ([]byte, error) {
	return bindataRead(
		_webTestTmpl,
		"web/test.tmpl",
	)
}

func webTestTmpl() (*asset, error) {
	bytes, err := webTestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/test.tmpl", size: 127, mode: os.FileMode(420), modTime: time.Unix(1507212317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webYour404PageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x92\x41\x6f\x13\x31\x10\x85\xcf\xe4\x57\x4c\x7c\x6d\xbc\x26\x0a\xd0\x16\xd9\x2b\xb5\x34\xa8\xaa\x80\x50\x28\x42\x70\x33\xeb\xc9\x7a\x12\xaf\xbd\xb1\x27\x89\xc2\xaf\x47\xd9\x04\xb5\x27\xcf\xcc\x93\x9e\xbe\xf7\x64\x3d\xbe\x5b\x7c\x78\xfa\xf5\x75\x0e\x9e\xbb\x50\x8f\xf4\xf1\x81\x60\x63\x6b\x04\x46\x51\x8f\x00\xb4\x47\xeb\x8e\x03\x80\x1e\x4b\x09\xdf\x70\xb3\xa5\x8c\x0e\x3a\x64\x0b\x6c\xdb\x02\x52\x9e\xf5\xe1\xd4\x78\x9b\x0b\xb2\x11\x5b\x5e\xca\x2b\xf1\x52\x8a\xb6\x43\x23\x76\x84\xfb\x3e\x65\x16\xd0\xa4\xc8\x18\xd9\x88\x3d\x39\xf6\xc6\xe1\x8e\x1a\x94\xc3\x32\x01\x8a\xc4\x64\x83\x2c\x8d\x0d\x68\xa6\x13\x28\x3e\x53\x5c\x4b\x4e\x72\x49\x6c\x62\x3a\x5b\xbf\xd2\x4c\x1c\xb0\xbe\x0d\x36\xae\xa1\xb7\x2d\x6a\x75\xba\x1c\xe9\xd5\x7f\x7c\xfd\x27\xb9\xc3\x19\xc6\x4f\xeb\x7b\x0c\x21\x4d\x60\x9f\x72\x70\x63\xad\xfc\xb4\x1e\x3d\x67\x5c\x3d\x6e\x31\x1f\x60\x49\xb9\xf0\x04\xd8\x63\x84\x27\x64\x8f\xf9\xbc\xdc\xa6\xc4\x85\xb3\xed\xe1\xe1\x7b\xf5\x1c\xbf\x34\x99\x7a\x86\x92\x1b\x23\x3c\x73\x5f\xde\x2b\xd5\x24\x87\xd5\x6a\x73\xf4\xab\x9a\xd4\xa9\xd3\x28\x67\xd5\xb4\x9a\x56\x25\x50\x57\x75\x14\xab\x55\x11\x40\x91\xb1\xcd\xc4\x07\x23\x8a\xb7\xb3\xab\x37\xf2\xe6\xf2\xe3\xef\xd5\xe5\xee\xc2\xa9\xe2\xba\xcf\x9b\x5e\xc5\xc5\xe3\x3e\xd0\xa7\xdd\x8f\xf2\xb0\xbc\xbb\xff\x79\xb1\xbe\x5e\x74\xad\xb2\x6a\xee\xf1\xc6\xb5\xfc\xf7\x4b\x99\xf9\x7e\x69\xdb\x77\x73\x77\xfd\xf6\x75\x14\xd0\xe4\x54\x4a\xca\xd4\x52\x34\xc2\xc6\x14\x0f\x5d\xda\x16\x51\x6b\x75\x62\x1d\xc0\x87\x9a\x4e\xed\x68\x35\xfc\x83\x7f\x01\x00\x00\xff\xff\xb5\x60\xf2\x4b\x17\x02\x00\x00")

func webYour404PageTmplBytes() ([]byte, error) {
	return bindataRead(
		_webYour404PageTmpl,
		"web/your-404-page.tmpl",
	)
}

func webYour404PageTmpl() (*asset, error) {
	bytes, err := webYour404PageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/your-404-page.tmpl", size: 535, mode: os.FileMode(493), modTime: time.Unix(1507212317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webYour500PageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x92\x41\x6f\x13\x31\x10\x85\xcf\xe4\x57\x4c\x7c\x6d\xbc\x26\x0a\xd0\x16\xd9\x2b\xb5\x34\xa8\xaa\x80\x50\x28\x42\x70\x33\xeb\xc9\x7a\x12\xaf\xbd\xb1\x27\x89\xc2\xaf\x47\xd9\x04\xb5\x27\xcf\xcc\x93\x9e\xbe\xf7\x64\x3d\xbe\x5b\x7c\x78\xfa\xf5\x75\x0e\x9e\xbb\x50\x8f\xf4\xf1\x81\x60\x63\x6b\x04\x46\x51\x8f\x00\xb4\x47\xeb\x8e\x03\x80\x1e\x4b\x09\xdf\x70\xb3\xa5\x8c\x0e\x3a\x64\x0b\x6c\xdb\x02\x52\x9e\xf5\xe1\xd4\x78\x9b\x0b\xb2\x11\x5b\x5e\xca\x2b\xf1\x52\x8a\xb6\x43\x23\x76\x84\xfb\x3e\x65\x16\xd0\xa4\xc8\x18\xd9\x88\x3d\x39\xf6\xc6\xe1\x8e\x1a\x94\xc3\x32\x01\x8a\xc4\x64\x83\x2c\x8d\x0d\x68\xa6\x13\x28\x3e\x53\x5c\x4b\x4e\x72\x49\x6c\x62\x3a\x5b\xbf\xd2\x4c\x1c\xb0\xbe\x0d\x36\xae\xa1\xb7\x2d\x6a\x75\xba\x1c\xe9\xd5\x7f\x7c\xfd\x27\xb9\xc3\x19\xc6\x4f\xeb\x7b\x0c\x21\x4d\x60\x9f\x72\x70\x63\xad\xfc\xb4\x1e\x3d\x67\x5c\x3d\x6e\x31\x1f\x60\x49\xb9\xf0\x04\xd8\x63\x84\x27\x64\x8f\xf9\xbc\xdc\xa6\xc4\x85\xb3\xed\xe1\xe1\x7b\xf5\x1c\xbf\x34\x99\x7a\x86\x92\x1b\x23\x3c\x73\x5f\xde\x2b\xd5\x24\x87\xd5\x6a\x73\xf4\xab\x9a\xd4\xa9\xd3\x28\x67\xd5\xb4\x9a\x56\x25\x50\x57\x75\x14\xab\x55\x11\x40\x91\xb1\xcd\xc4\x07\x23\x8a\xb7\xb3\xab\x37\xf2\xe6\xf2\xe3\xef\xd5\xe5\xee\xc2\xa9\xe2\xba\xcf\x9b\x5e\xc5\xc5\xe3\x3e\xd0\xa7\xdd\x8f\xf2\xb0\xbc\xbb\xff\x79\xb1\xbe\x5e\x74\xad\xb2\x6a\xee\xf1\xc6\xb5\xfc\xf7\x4b\x99\xf9\x7e\x69\xdb\x77\x73\x77\xfd\xf6\x75\x14\xd0\xe4\x54\x4a\xca\xd4\x52\x34\xc2\xc6\x14\x0f\x5d\xda\x16\x51\x6b\x75\x62\x1d\xc0\x87\x9a\x4e\xed\x68\x35\xfc\x83\x7f\x01\x00\x00\xff\xff\xb5\x60\xf2\x4b\x17\x02\x00\x00")

func webYour500PageTmplBytes() ([]byte, error) {
	return bindataRead(
		_webYour500PageTmpl,
		"web/your-500-page.tmpl",
	)
}

func webYour500PageTmpl() (*asset, error) {
	bytes, err := webYour500PageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/your-500-page.tmpl", size: 535, mode: os.FileMode(493), modTime: time.Unix(1507212317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplAformTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6e\xc3\x20\x10\x45\xd7\x70\x0a\xc4\x3e\xf8\x02\xd8\x52\x9b\x55\x17\xed\x2a\x17\x20\x66\xea\xa0\x60\xb0\xec\x01\xa9\x42\x73\xf7\x6a\x6c\xb9\x55\xd8\xfd\xc7\x87\xff\xec\x77\x5e\x67\x35\x46\xb7\x6d\xbd\x9e\xf2\x85\xa3\x56\xd5\xc5\xe0\x1d\xc2\x20\xd5\x71\x84\xf5\xa1\x9e\xb5\x15\xb6\x12\x51\x0f\xb6\xf3\xa1\x0e\x52\x88\xd6\x56\x97\x26\x50\xe6\x23\x2d\x05\x89\xa4\x60\x76\x77\xb8\x67\x65\x76\xd2\x1a\x24\x4f\x24\xa5\x10\x36\xec\x1c\x7f\x16\xe8\xf5\x23\x78\x0f\x49\xab\xe4\x66\xe8\x75\x6b\xe6\x33\x7b\x88\x5f\x6e\x06\x22\xc3\x3a\x98\x9f\x7c\x5f\x5d\x2c\x47\xe1\xc6\x80\x48\xab\xee\xcf\x4f\xbd\x7c\xb9\x95\xfb\x1c\x50\x9f\xbe\xad\x99\xf7\x82\x98\xd3\x95\x33\x3f\x4c\xd3\x65\x8c\x61\x7c\x1e\x7b\x80\x8f\xec\x19\xff\x4f\x5c\x6f\x6f\xe7\x80\xed\x58\x62\x90\xbf\x01\x00\x00\xff\xff\x91\x8b\x11\x81\x2a\x01\x00\x00")

func tmplAformTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplAformTmpl,
		"tmpl/aform.tmpl",
	)
}

func tmplAformTmpl() (*asset, error) {
	bytes, err := tmplAformTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/aform.tmpl", size: 298, mode: os.FileMode(420), modTime: time.Unix(1511178921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplAinputTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x8f\x9b\x30\x10\x3d\x87\x5f\x31\xb2\x7a\x5d\x68\x0f\xbd\x6c\x59\x2e\x7b\xda\x43\xab\xaa\xaa\x7a\xf7\xc2\x6c\xb0\x6a\x8c\x03\x66\x95\xc8\x9d\xff\x5e\xf9\x83\x40\x0a\xdb\xa4\x15\xb9\xc4\x8c\xed\x37\xef\xbd\x19\x8f\xb5\xe2\x05\x14\x1e\x80\x31\x48\xbf\x0b\x23\x91\x28\xd9\xed\xa6\x70\x59\x63\xf9\xf3\xb9\x3d\xba\xed\x93\x0e\xbb\xb9\x2e\xac\x1d\x4f\xe7\x99\x2e\xfc\x0d\x54\x15\x51\x32\xfe\x27\x1e\x82\xf5\x28\xb1\x34\xcd\x20\x0d\x83\x5f\xf0\xd4\x3f\xa9\x33\x8e\xb5\xef\x5e\xb9\x1c\x10\xee\x1f\x20\xfd\xe1\x56\x44\x49\x2e\xf9\x33\x4a\x07\xff\x55\xf2\x12\xeb\x56\x56\xd8\xb9\x24\x21\x9e\x07\x3c\x28\x25\xef\xfb\x07\x66\x6d\xfa\xe8\x56\x44\x0c\xd4\xfe\xae\x69\x2b\x94\x3e\xfa\xd9\xad\xbe\xf0\x06\x89\x52\x6b\xd3\xb0\x62\xe0\x39\xa5\xdf\xf0\x30\x88\x0e\x2b\xa2\x2e\xae\x22\x69\x70\x3c\x85\x96\x58\x24\x3b\x6b\x3b\xae\xf6\x08\xe9\x63\xdd\x8a\x12\xfb\x20\xbc\xd5\x46\xb4\x2a\xe2\x8c\x82\x82\x0c\xa2\xc0\xed\x8c\xe6\x44\x38\xe6\xe1\x8e\x87\x0c\xd6\xe4\x59\x38\x59\x38\xb3\x64\x8f\x44\x73\xaf\x16\x3e\xfd\xbf\x25\x57\xf5\xde\xe0\x99\xe7\xbd\x52\xa8\x0d\x0c\x82\x7f\x76\xe8\x45\x48\x5c\xfa\xa3\x8b\x5c\x28\x3d\xac\x5a\xc0\xcb\x12\xb5\xf1\xb1\x0b\xf7\x18\x6c\xd2\x30\xe6\xa4\xd1\xdf\x0f\x5c\x18\x64\x85\x7f\x0f\x97\xb4\x0d\x1e\x0d\xef\x90\xaf\x52\x1f\x37\xd7\xd8\xf7\xe6\x24\xf1\x81\x35\x42\xdd\xd5\x28\xf6\xb5\xb9\xff\xf0\xf1\xbd\x3e\x7e\x62\xa0\x27\x31\x6b\xe2\x36\xd0\xe6\x8a\x13\x8b\x9d\x67\x23\xc9\x02\x56\xe4\x75\xbc\x12\xed\x42\x9b\x7b\xdf\x8a\x37\xa1\x6b\x42\x4e\x17\x1a\xb3\xf8\xf0\x94\x7c\x7d\x1a\xac\x35\x19\x80\x1f\x40\xb1\xe4\x90\x80\xfb\xcd\xf5\xfa\xac\x53\xfb\xe3\x21\xf6\x1f\x30\xd3\x0d\xc8\x88\xfc\x48\x9b\x6a\x18\x10\xfc\xd9\x33\xbb\x65\xa5\x3d\x84\xb7\xd3\x41\x87\xba\x47\xe1\x59\xe1\x21\x76\xb1\x9b\x75\xf8\x9c\x0d\xc4\x99\x57\xd3\x38\x7d\xb3\x8b\x03\xf6\x74\xf0\xe6\x5a\xe2\x21\x3a\xf7\x96\xd2\x6b\xdd\x9c\x15\xf0\xc7\x5c\xbf\x24\x2f\xd4\x2b\x97\xa2\x5a\x72\x9f\x13\xaf\x45\x55\xa1\x62\x30\x73\x2c\x96\x73\x9b\x19\x9d\x4d\xac\xfe\xfe\xf4\x57\xf2\x5f\x79\x35\x8b\xd7\xbc\x0d\xdf\xd1\x49\xf7\x79\xfb\xdf\xef\x00\x00\x00\xff\xff\x89\x31\x2b\x30\x9a\x07\x00\x00")

func tmplAinputTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplAinputTmpl,
		"tmpl/ainput.tmpl",
	)
}

func tmplAinputTmpl() (*asset, error) {
	bytes, err := tmplAinputTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/ainput.tmpl", size: 1946, mode: os.FileMode(420), modTime: time.Unix(1511178921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplFormTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x6e\xc4\x20\x10\x45\x6b\x38\xc5\x68\xfa\xb5\x2f\x80\x2d\x25\x5b\xa5\x48\xb7\x17\x60\xcd\xc4\x8b\x62\xc0\xc2\x83\xa5\x08\x71\xf7\x08\xac\x75\xb2\xae\xfe\xbc\xe2\xe9\x19\xf5\x15\xa2\x03\xf2\x13\xff\xac\x34\xa0\x4b\x0b\xdb\x55\x47\xee\x2b\xbf\x18\xcd\x1a\x61\x5a\xf4\xb6\x0d\x38\x87\x4b\x85\x08\x7a\x62\x1b\xfc\x80\x39\x77\x37\x1d\x67\xe2\x52\x10\x1c\xf1\x23\x98\x06\x3f\xdb\x2c\x05\x47\x09\xc7\x27\xce\xa1\x8c\xdd\x9f\xc2\x48\x5b\x5a\x18\x47\xd5\x1b\xbb\x8f\x52\x88\x9c\xa3\xf6\x33\x41\xf7\xe1\xd7\xc4\xa5\x48\x51\xd9\x9d\xdb\x09\x5d\x03\x39\x93\x37\xa5\x48\x29\x84\xb2\x8d\x1f\xe5\x0f\x6b\x0c\x79\x04\xaf\x1d\x0d\x58\x43\x39\x7c\x57\xb0\xeb\x25\xd1\x11\x5b\x41\x6d\xed\xcf\x30\x00\xf8\x37\x5f\x84\x5b\xba\x3b\xcb\xe7\xdf\xe7\xdc\xbd\x27\xe6\xe0\xaf\xf5\xae\x96\x3f\xf1\xf5\xf6\xf6\xd4\xaa\xf6\x70\xa3\xfc\x0d\x00\x00\xff\xff\xa2\x65\xa1\x6f\x58\x01\x00\x00")

func tmplFormTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplFormTmpl,
		"tmpl/form.tmpl",
	)
}

func tmplFormTmpl() (*asset, error) {
	bytes, err := tmplFormTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/form.tmpl", size: 344, mode: os.FileMode(420), modTime: time.Unix(1510945478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplInputTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xb1\x6e\xdb\x30\x10\x9d\xad\xaf\x38\x10\x5d\x2b\xb5\x43\x97\x54\xd6\x92\x29\x4b\x51\x14\x45\x77\x46\xba\x44\x44\x69\x8a\x96\xa8\xc0\x06\xcb\x7f\x2f\x78\xa4\x2c\x39\x62\xea\xda\x88\x17\x53\x47\xf2\xdd\x7b\xef\x8e\x67\xad\x78\x02\x85\x7b\x60\x0c\xf2\x9f\xc2\x48\x74\x2e\xdb\x6c\xe6\x70\xdd\x62\xfd\xfb\xb1\x3b\xf8\xed\xa3\x0e\xbb\xa5\xae\xac\x9d\x4e\x97\x85\xae\xe8\x06\xaa\xc6\xb9\x6c\xfa\xcf\x08\x82\x0d\x28\xb1\x36\xbb\x51\x1a\x06\x7f\xe0\x61\x78\x50\x27\x1c\x6b\x3f\xbc\x70\x39\x22\xdc\x6d\x21\xff\xe5\x57\xce\x65\xa5\xe4\x8f\x28\x3d\xfc\x77\xc9\x6b\x6c\x3b\xd9\x60\xef\x93\x84\x78\x19\xf0\xa0\x96\x7c\x18\xb6\xcc\xda\xfc\xde\xaf\x9c\x63\xa0\xf8\x0e\x29\xf2\x8d\xef\xd0\x07\x88\x40\xfe\x03\xf7\xa3\xe8\xb1\x71\xae\x8f\xab\xc8\x10\x3c\x29\xa1\x25\x56\xd9\xc6\xda\x9e\xab\x67\x84\xfc\xbe\xed\x44\x8d\x43\x50\xd9\x69\x23\x3a\x15\x71\x26\xf6\x81\xb3\x73\x81\xc8\x09\xcd\x33\xf6\x34\xc3\x1d\x82\x0c\x3e\x94\x45\x38\x59\x79\x67\xe4\x80\xce\x2d\x8d\x59\x99\x72\xbb\xfe\x8b\x7a\x5f\x1b\x44\x24\x13\x25\x78\x07\x37\xe0\x6a\x3b\x9e\x84\xc4\xb5\x19\xba\x2a\x85\xd2\x63\x52\x2f\xaf\x6b\xd4\x86\x62\x67\x56\x31\xb8\xbe\x15\xcc\x51\x87\x0b\x21\x31\x83\xa2\xa2\xb6\x3e\xe7\x68\xf0\x60\x78\x8f\x3c\xc9\x73\xda\x4c\x51\x1d\xcc\x51\xe2\x96\xed\x84\xfa\xd8\xa2\x78\x6e\xcd\xdd\xe7\x2f\x9f\xf4\xe1\x2b\x03\x3d\x33\x4f\x29\xb9\x56\x88\xb7\x3d\x96\xb1\x2c\x26\x46\x15\x24\xb4\xf4\xbc\x11\xdd\x4a\x88\x7f\x93\x3e\x27\xf5\x43\xc8\xe9\x43\x53\x16\x0a\xcf\xc9\xd3\x2f\x38\xd5\x3e\x00\x34\x34\x62\x31\x21\x03\xff\x9b\xc4\x51\xc6\xb9\x83\x71\x1f\xbb\x0a\x98\xe9\x47\x64\xce\xd1\x08\x9a\x8b\x15\x6e\xd3\xd9\x13\xb3\x75\x49\x09\x82\xbc\xf3\xd0\xa1\xc0\x51\x74\x51\x11\xc4\x26\xf6\xa8\x0e\x9f\x8b\x01\xb6\xf0\x69\x1e\x7f\x6f\xf6\x66\xc0\x9e\x0f\xa6\x8b\x86\xfb\x68\xd1\x5b\xb2\x2e\xf5\x68\x51\xc1\xab\xa1\x7b\xce\x54\xa8\x17\x2e\x45\xb3\x26\xba\x64\xd9\x8a\xa6\x41\xc5\x60\x61\x4f\xac\xdb\x0d\x03\xb4\x98\x29\xfc\xfb\xa9\x26\x92\x5d\x68\xfc\xd5\x83\xbc\x81\xdc\xe4\x91\xff\xfc\xff\xbf\xbf\x01\x00\x00\xff\xff\x25\xbd\x7a\xae\x11\x07\x00\x00")

func tmplInputTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplInputTmpl,
		"tmpl/input.tmpl",
	)
}

func tmplInputTmpl() (*asset, error) {
	bytes, err := tmplInputTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/input.tmpl", size: 1809, mode: os.FileMode(420), modTime: time.Unix(1511178921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/test.tmpl":          webTestTmpl,
	"web/your-404-page.tmpl": webYour404PageTmpl,
	"web/your-500-page.tmpl": webYour500PageTmpl,
	"tmpl/aform.tmpl":        tmplAformTmpl,
	"tmpl/ainput.tmpl":       tmplAinputTmpl,
	"tmpl/form.tmpl":         tmplFormTmpl,
	"tmpl/input.tmpl":        tmplInputTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"aform.tmpl":  &bintree{tmplAformTmpl, map[string]*bintree{}},
		"ainput.tmpl": &bintree{tmplAinputTmpl, map[string]*bintree{}},
		"form.tmpl":   &bintree{tmplFormTmpl, map[string]*bintree{}},
		"input.tmpl":  &bintree{tmplInputTmpl, map[string]*bintree{}},
	}},
	"web": &bintree{nil, map[string]*bintree{
		"test.tmpl":          &bintree{webTestTmpl, map[string]*bintree{}},
		"your-404-page.tmpl": &bintree{webYour404PageTmpl, map[string]*bintree{}},
		"your-500-page.tmpl": &bintree{webYour500PageTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
